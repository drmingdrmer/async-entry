#![feature(prelude_import)]
#[prelude_import]
use std::prelude::rust_2021::*;
#[macro_use]
extern crate std;
#[allow(unused_imports)]
use lib_crate::monoio;
#[allow(unused_imports)]
use lib_crate::tokio;
extern crate test;
#[cfg(test)]
#[rustc_test_marker = "specify_trace_lib"]
pub const specify_trace_lib: test::TestDescAndFn = test::TestDescAndFn {
    desc: test::TestDesc {
        name: test::StaticTestName("specify_trace_lib"),
        ignore: false,
        ignore_message: ::core::option::Option::None,
        source_file: "test-async-entry/tests/it-tracing-lib.rs",
        start_line: 9usize,
        start_col: 10usize,
        end_line: 9usize,
        end_col: 27usize,
        compile_fail: false,
        no_run: false,
        should_panic: test::ShouldPanic::No,
        test_type: test::TestType::IntegrationTest,
    },
    testfn: test::StaticTestFn(|| test::assert_test_result(specify_trace_lib())),
};
/// Specify where to load tracing and tracing_future.
/// Do not need to import
fn specify_trace_lib() {
    let body = async {};
    use lib_crate::tracing::Instrument;
    let body_span = {
        use ::tracing::__macro_support::Callsite as _;
        static CALLSITE: ::tracing::__macro_support::MacroCallsite = {
            use ::tracing::__macro_support::MacroCallsite;
            static META: ::tracing::Metadata<'static> = {
                ::tracing_core::metadata::Metadata::new(
                    "specify_trace_lib",
                    "it_tracing_lib",
                    ::tracing::Level::INFO,
                    Some("test-async-entry/tests/it-tracing-lib.rs"),
                    Some(8u32),
                    Some("it_tracing_lib"),
                    ::tracing_core::field::FieldSet::new(
                        &[],
                        ::tracing_core::callsite::Identifier(&CALLSITE),
                    ),
                    ::tracing::metadata::Kind::SPAN,
                )
            };
            MacroCallsite::new(&META)
        };
        let mut interest = ::tracing::subscriber::Interest::never();
        if ::tracing::Level::INFO <= ::tracing::level_filters::STATIC_MAX_LEVEL
            && ::tracing::Level::INFO <= ::tracing::level_filters::LevelFilter::current()
            && {
                interest = CALLSITE.interest();
                !interest.is_never()
            }
            && CALLSITE.is_enabled(interest)
        {
            let meta = CALLSITE.metadata();
            ::tracing::Span::new(meta, &{ meta.fields().value_set(&[]) })
        } else {
            let span = CALLSITE.disabled_span();
            {};
            span
        }
    };
    let body = body.instrument(body_span);
    #[allow(unused_mut)]
    let mut rt = tokio::runtime::Builder::new_current_thread()
        .enable_all()
        .build()
        .expect("Failed building the Runtime");
    #[allow(clippy::expect_used)]
    rt.block_on(body);
}
#[rustc_main]
#[coverage(off)]
pub fn main() -> () {
    extern crate test;
    test::test_main_static(&[&specify_trace_lib])
}
